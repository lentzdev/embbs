     Volume 1, Number 20                              20 November 1989
     =================================================================
      ********   ***        ***  *******     ********       *********
     **********  ****      ****  ********    *********     ***********
     **      **  ** **    ** **  **    ***   **     ***   ***       **
     **          **  **  **  **  **    ***   **     ***   ***
     ******      **   ****   **  ********    *********     *********
     ******      **    **    **  *********   **********     *********
     **          **          **  **     ***  **      ***           ***
     **      **  **          **  **     ***  **      ***   **      ***
     **********  **          **  *********   **********    ***********
      ********   **          **  ********    *********      *********
     EUROPEAN     MAGAZINE     FOR      BULLETIN     BOARD     SYSTEMS
     =================================================================
     Editor in Chief                                         Art v1.10 
     Technical Coordination                                Arjen Lentz
     Regular Contributors                             Gerhard Hoogterp
                                                       Amos Wittenberg
                                                       Jeroen van Drie
     
     EMBBS   COPYRIGHT (C) 1989 by Arjen G. Lentz; ALL RIGHTS RESERVED
     An electronic magazine,  by and for BBS users,  published weekly.
     May  be  distributed  and/or duplicated freely for non-commercial
     use and via Bulletin Board Systems only.   For other uses, please
     contact:   Arjen G. Lentz,  Langegracht 7B,  3811 BT  Amersfoort,
     The Netherlands.    AINEX-RBBS ++31-33-633916 (FidoNet 2:286/201)
     
     Article  submissions  will  be greatly appreciated, and should be
     mailed  or  uploaded  to  one  of the distribution/support sites.
     More submission information can be found in the NOTICES section.
     
     The   contents   of  the  articles  included  here  are  not  our
     responsibility,  nor  do  we necessarily agree with them. We will
     publish   ANYTHING  which  is  properly  attributed  and  legally
     acceptable.


                             Table of Contents

     1. ARTICLES  .................................................. 1
        The Forth Programming Language - Part IV  .................. 1
        Advanced TurboPascal - Part I (Strings)  ................... 3
     2. NOTICES  ................................................... 5
        Calendar of Events  ........................................ 5
        EMBBS Distribution & Support Sites  ........................ 6

                                 - - - - -
     EMBBS 1-20                   Page 1                   20 Nov 1989


     =================================================================
                                 ARTICLES
     =================================================================


     The Forth Programming Language - Part 4
     By Johan Siegers
     Fidonet 2:286/201.16
     
     This time we will deal with some text, and I will show you how
     forth uses conditional structures.
     
     Until now we printed the number on top of the stack as a decimal
     number. We can also print is as a character, equal to the
     print chr$(x) from basic.
     The forth word  EMIT  prints the character on the stack as an
     ascii character.
     
     65 EMIT  will print:   A  ok
     
     Printing larger amounts of text can be done by using the forth
     print statement:  ."
     
                             ." This is text "
     
     Will print a short message.
     Mind the space between the  ."  and the T. It is necessary for
     forth to seperate the commands.
     
     ."This is text"  will give:  ."This  ?
     
     
     If...Then...Else
     ----------------
     
     Forth has an If .. then .. else  alike statement.
     The right syntax is:
     
              condition
          IF
              'true statements'
          ELSE
              'false statements'
          THEN
     
     
     By example:
     
                : ZERO?  0 = IF ." Yes" ELSE ." No " THEN ;
     
     This statment will check if the number of the stack equals zero.
     The  =  statement sets the condition.
     Other condition checks are:
     
     <   >    0<   0=   0>   NOT   U<
     
     EMBBS 1-20                   Page 2                   20 Nov 1989


     0= is  fast assemby version of: 0 =
     
     U< is for comparison of unsinged integers
     Remember a normal integer has a range of -32768 .. 32767
           an unsinged integer has a range of 0 .. 65535
     
     
     There is a small problem. A condition check removes the number on
     top of the stack. If we don't want that, we will have to make a
     copy first:
     
     : ZERO? DUP 0 = IF ." Yes " THEN ;
     
     Here you see that the else is not obligatory. You will need the
     THEN however, to mark the end of the true statements.
     
     There are some conditional who are non-existent in forth.
     But it's very easy to make then ourselves:
     
     : <= > NOT ;               smaller or equal
     : <> = NOT ;               unequal
     : != = NOT ;               unequal (if you prefer this version)
     : >= < NOT ;               larger or equal
     
     Well, it isn't getting any easier.
     Perhaps the following will help:
     
     
               FORTH                         BASIC
     ---------------------------   ----------------------------
     2 3 = if                         if 2=3
     2 3 < if                         if 2<3
     test @ 7 > if                    if test > 7
     
     
     To be continued .....                                      Johan.

     -----------------------------------------------------------------
     EMBBS 1-20                   Page 3                   20 Nov 1989


     Advanced turbopascal - Part I (Strings)
     By Gerhard Hoogterp
     FidoNet 2:286/201.6
     
     So,  an  other  serie of articles and this time with a subject at
     which  I  feel  like  a  fish  in  the  water. To start with some
     disclaimers.
     
     This  series of articles assumes the usage of Turbo Pascal 5.0 on
     IBM  pc  or  compatible.  I, myself program on a Schneider PC1512
     with  640Kb internal memory and the only guarantee I make is that
     my procedures work on my own machine..
     
     These  articles also assume that you have some basic knowledge of
     Pascal (turbo pascal is preferable)
     
     So,  lets  begin  with the real stuff.. Anyone who programs in TP
     (Turbo Pascal) knows that it has a rich amount of string handling
     functions.  But  those  functions  are  rather  basic. BASIC, for
     example,  has some more advanced functions unknown to pascal. So,
     some time ago, when I was working on a unit for parsing input for
     an adventure game I needed an other approach to strings. I wanted
     to  see  a  string not only as a string, but as a list of tokens.
     Each  token  separated  from  the  others  by  a  delimiter. This
     approach  wasn't  only  useful  when  parsing userinput, but also
     while  reading  configuration  files  so I made it the subject of
     this  first  article.
     
     Lets  define a string  of a list  of tokens. In  a syntax diagram
     this would be defined as :
     
       String :: <Token>[<delimiter><Token>]<End_of_String>
     
     Where a token is any  string of characters which don't contain  a
     delimiter. Delimiters can be any character  which you want to use
     for this purpose. Quite often this will be a space, but ;,/,+ are
     also very  common. A special  delimiter is the  End_of_Line which
     isn't specially defined.
     
     To read a tokenlist the first function was defined. Called
     
       FindToken(Var TokenList : String; Delimiters : String):String;
     
     This procedure reads  the first token of a string  and returns it
     to the program. The  tokenlist is updated to the  tokenlist minus
     the first token  and it's delimiter.  So this functions splits  a
     token list in a head and a tail.
     
     A  problem with  this  function  was that  when  it  had to  scan
     userinput  there  was  a  big  chance  that there  would  be  two
     delimiters after  each other.  For example  two (or more)  spaces
     which would define empty  token. As this  is seldom the way  it's
     meant there has  to be a way to simplify the delimiters. A way to
     turn  a serie of delimiters into a  single delimiter. So a second
     procedure was made.
     
     EMBBS 1-20                   Page 4                   20 Nov 1989


      SimplifyDelimiters(Var TokenList : String; Delimiters : String);
     
     These two extensions give a lot  of new possibilities for working
     with strings. Let's take a look on an example. The initialization
     of a program by reading a initfile.
     
     Assign(Init,InitFileName);
     Reset(Init);
     While not EOF(Init) do
      Begin
      ReadLn(Init,Line);
      SimplifyDelimiters(Line,' ;/);
      Token:=FindToken(Line,' ;/');
      Case Token2Number(Token) Of
       0 : WriteLn('Unknown keyword');
       1 : Begin
           End;
       2 : Begin
           End;
      End; {Case}
      End; {While}
     Close(Init);
     
     This  little  routine is  the  skeleton  for reading  a  complete
     initfile. We read a line, simplify the delimiters so the initfile
     may have a nice (user readable)  format, Take the first token and
     convert it to a number. And that's it.. Easy, and fast..
     
     The  last  minor  problems  are   leading  and  trailing  spaces.
     SimplifyDelimiter  would translate  a  serie of  leading/trailing
     spaces to a  single space. But that's still to  much! The keyword
     wouldn't be  found and everything would not work. Trailing spaces
     can give similar problems. So, there are two more procedures.
     
       SkipLeadingSpaces(TokenList : String);
       DeleteTrailingSpaces(Tokenlist : String);
     
     and  to  finish  the  lot of  course  a  procedure  to  upcase or
     lowercase a tokenlist.
     
       UpCase(Tokenlist : String);
       LowerCase(TokenList : String);
     
     The pascal source of  all these procedures and functions  will be
     downloadable and requestable  by at least the  dutch distribution
     point under  the name TOKEN.ZIP Next week I will handle the way's
     to use ANSI in a pascal program. See you then.
     
     Questions and remarks can be send to  the above address or in the
     international pascal echo.
     
     Greetings. Gerhard.

     -----------------------------------------------------------------
     EMBBS 1-20                   Page 5                   20 Nov 1989


     =================================================================
                                  NOTICES
     =================================================================


                            Calendar of Events
     
     
     24 Nov 1989 - 25 Nov 1989
        Micro Computer Days in Utrecht (Holland), from 10 to 17 hrs,
        organised by the Dutch Hobby Computer Club.
     
      1 Dec 1989
        All telephone numbers in The Hague (Holland), get an extra
        (7th) digit, the prefix 3. (ie. 123456 becomes 3123456.)
     
     ?? ??? 1990 - ?? ??? 1990
        EuroCon IV in Antwerp, Belgium: annual European FidoNet
        Conference. Not only for sysops, mind you!  Also for points,
        users and everyone else interested in FidoNet communications..
     
      1 Jan 1993
        The European Community opens up its internal borders.
     
     If  you  have  something  you would like to see on this calendar,
     please send a note to the editorial headquarters @ 2:286/201.

     -----------------------------------------------------------------
     EMBBS 1-20                   Page 6                   20 Nov 1989


                    EMBBS Distribution & Support Sites
     
     
     The  following systems offer a variety of services to the readers
     in their country (BBS as well as users):
     * Forwarding any submission/comment/puzzle msgs or files for you!
     * Having new EMBBS issues available a few hours after release.
     * Keeping available some or all previous issues of EMBBS.
     * Linking the EMBBS EchoMail Conference to anyone interested.
     Note:  Please do not request during the Z2MH: 02:30 - 03:30 GMT.
     
        Austria:  (FidoNet Region 2:31)
        -  Deep Node, Vienna; sysop Felix Kasza
           ++43-222-804244169 at 1200, 2400 and HST 14K4, with MNP5
           FidoNet Node 2:310/11 (Continuous mail)
     
        Belgium:  (FidoNet Region 2:29)
        -  TRIPOD BBS, Maasmechelen; sysop Johan Zwiekhorst
           ++32-11-762626 at 300, 1200/75, 1200 and 2400
           Fidonet Node 2:292/100 (Continuous mail)
     
        Denmark:  (FidoNet Region 2:23)
        -  The Polar Link HST, Billund; sysop Christian Sorensen
           ++45-75-885596 at 1200, 2400, HST 14K4 and V.32, with MNP5
           Fidonet Node: 2:230/102 (Continuous mail / No BBS)
     
        Finland:  (FidoNet Region 2:22)
        -  Zone 2 Coordinator System; Z2C Ron Dwight
           ++358-0-4523389 at 1200, 2400 and PEP, with MNP3
           Fidonet Node 2:2/0 (Continuous mail)
        -  Micro Maniacs; sysop Ron Dwight
           ++358-0-425966 at 1200, 2400, HST 14K4 and V.32, with MNP5
           FidoNet Node 2:515/1 (Continuous mail)
     
        Great Britain:  (FidoNet Region 2:25)
        -  KESHER BBS, Londen; sysop Amos Wittenberg
           ++44-1-458-0521 at 1200 and 2400
           FidoNet Node 2:253/178 (Continous mail)
        -  The London Mail Centre, Londen; sysop Mike Simkins
           ++44-1-534-1200 at 1200, 2400 and HST, with MNP5
           FidoNet Node 2:254/1 (Continuous mail)
     
        Holland:  (FidoNet Region 2:28)
        -  AINEX-RBBS (EMBBS HQ), Amersfoort; sysop Arjen Lentz
           ++31-33-633916 at 1200, 2400, and HST, with MNP5
           FidoNet Node 2:286/201 aka 2:2/102 (Continuous mail)
     
        Republic of South Africa:  (FidoNet Region 5:49)
        -  Capricorn Too FIDO, Hout Bay; sysop Ralph Colyn
           ++27-21-790-4551 at 2400
           FidoNet Node 5:492/3 (Continuous mail)
     
        Spain:    (FidoNet Region 2:34)
        -  Rocky, Barcelona; sysop Jaime Roca
           ++34-3-8746155 at 300 and 1200
           FidoNet Node 2:343/0 aka 2:343/5 (Continuous mail)
     EMBBS 1-20                   Page 7                   20 Nov 1989


        Sweden:   (FidoNet Region 2:20)
        -  Pallas BBS, Lund;  sysop Ulf Nilsson
           ++46-46-304878 at 1200, 2400, HST 14K4 and V.32, with MNP5
           FidoNet Node 2:200/112 (Continuous mail)
     
     If  you  would  like to become a distribution system for EMBBS in
     your region (country), please contact Arjen Lentz at FidoNet Node
     2:286/201  for  more  information.  More sites in one country are
     possible, though not necessary at this moment.

     -----------------------------------------------------------------
